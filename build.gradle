group 'com.ea.MatchingEngine'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version
    }
}

repositories {
    mavenCentral()

    maven {
        url "https://repo1.maven.org/maven2/"
    }

}

configurations.all {
    exclude module: 'log4j-to-slf4j'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
}

// https://github.com/Hakky54/log-captor#using-log-captor-alongside-with-other-logging-libraries
configurations {
    testImplementation {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude module: 'log4j-slf4j18-impl'
    }
    testRuntime{
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude module: 'log4j-slf4j18-impl'
    }
    testRuntimeClasspath{
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude module: 'log4j-slf4j18-impl'
    }
    //org.apache.logging.log4j:log4j-slf4j-impl
}

dependencies {
    // implementation = compile(deprecated)
    implementation "com.google.guava:guava:16+"
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'


    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.3'

    implementation group: "com.typesafe.akka", name: 'akka-bom_2.13', version: '2.6.14'
    implementation group: 'com.typesafe.akka', name: 'akka-actor_2.13', version: '2.6.14'
    implementation group: 'com.typesafe.akka', name: 'akka-actor-typed_2.13', version: '2.6.14'
    implementation group: 'com.typesafe.akka', name: 'akka-http_2.13', version: '10.2.4'

    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.10.4'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: '2.12.1'

    // TEST DEPENDENCIES
    testImplementation group: 'io.github.hakky54', name: 'logcaptor', version: '2.6.1'
    testImplementation 'junit:junit:4.12'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'

    //testImplementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '2.0.0-alpha1'
    //testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

}

//
test {
    useJUnitPlatform()
}

// copy all dependencies into this folder
task copyDependencies(type: Copy) {
    from configurations.compile
    into 'dependencies'
}

// simple
task hello {
    doLast {
        println 'Hello world!'
    }
}

// task dependency
task intro(dependsOn: hello) {
    doLast {
        println "I'm Gradle"
    }
}

// task x depends on y defined later
task taskX(dependsOn: 'taskY') {
    doLast {
        println 'taskX'
    }
}
task taskY {
    doLast {
        println 'taskY'
    }
}

File[] fileList(String dir) {
    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
}


task printme {
    doLast {
        print "sourceSets: "
        println sourceSets.main.output.classesDirs.getAsPath()

        File varFile = file('./')
        println "name: $varFile.name, path: $varFile.absolutePath"

        varFile = file(varFile.absolutePath)
        println "name: $varFile.name, path: $varFile.absolutePath"

        varFile = file("${rootDir}/build.gradle")
        println "name: $varFile.name, path: $varFile.absolutePath"
    }
}

jar { manifest { attributes( "Manifest-Version": "1.0", "Multi-Release": true ) } from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } }

task showJars {
    doLast {
        println("DO LAST");
        if( configurations && configurations.getByName('compile') ) {
            println("COMPILE config")
            configurations.compile.collect {
                println(it)
                if( !it.toString().contains('.gradle') ) {
                    //println(it)
                }
            }
        }
    }
}

task listConfigurations {
    doLast {
        configurations.all {
            println("Configuration: " + it)
        }
    }
}
